{"version":3,"file":"components-TextAreaInput-component-stories.4fc71c16.iframe.bundle.js","mappings":";;AAMA;;;AAGA;;;;;AAKA;;;;;AAKA;;;;AAIA;AACA;;ACdA","sources":["webpack://@mconf/bbb-ui-components-react/./src/components/TextAreaInput/styles.ts","webpack://@mconf/bbb-ui-components-react/./src/components/TextAreaInput/component.tsx"],"sourcesContent":["import styled from 'styled-components';\nimport { colorBorderDefault, colorBrand1, colorBrand2, colorLightGray, colorWhite } from '../../stylesheets/pallete';\nimport { borderRadiusDefault } from '../../stylesheets/sizing';\n\nexport const TextAreaInput = styled.textarea`\n  flex: 1;\n  background: ${colorWhite};\n  background-clip: padding-box;\n  margin: 0;\n  color: ${colorLightGray};\n  padding: calc(.3rem* 2.5) calc(.75rem* 1.25);\n  resize: none;\n  -webkit-transition: none;\n  transition: none;\n  border-radius: ${borderRadiusDefault};\n  font-size: 1rem;\n  line-height: 1;\n  min-height: 2.5rem;\n  max-height: 10rem;\n  border: 1px solid ${colorBorderDefault};\n  overflow-y: hidden;\n  margin: 0.3em;\n  &:focus {\n    outline: ${colorBrand1} solid 2px;\n    box-shadow: 0 0 0 2px ${colorBrand2} inset 0 0 0 1px ${colorBrand1};\n  }\n`;\n","import React, { useRef, useEffect, JSX } from 'react';\nimport { TextAreaInputProps } from './types';\nimport * as Styled from './styles';\n\n/**\n * A customizable text area input component.\n *\n * This component provides a styled, multi-line text input field that automatically\n * focuses on render and supports all standard textarea attributes.\n *\n */\nfunction TextAreaInput({\n  placeholder = '',\n  rows = 1,\n  maxLength = 250,\n  autoFocus = true,\n  inputRef = undefined,\n  onChange,\n  onKeyDown,\n  ...props\n}: TextAreaInputProps): JSX.Element {\n  const internalRef = useRef<HTMLTextAreaElement | null>(null);\n  \n  useEffect(() => {\n    if (autoFocus && internalRef.current) {\n      internalRef.current.focus();\n    }\n  }, [autoFocus]);\n\n  return (\n    <Styled.TextAreaInput\n      {...props}\n      rows={rows}\n      maxLength={maxLength}\n      ref={(ref) => {\n        internalRef.current = ref;\n        if (typeof inputRef === 'function') {\n          inputRef(ref);\n        } else if (inputRef && 'current' in inputRef) {\n          inputRef.current = ref;\n        }\n      }}\n      placeholder={placeholder}\n      onChange={onChange}\n      onKeyDown={onKeyDown}\n    />\n  );\n}\n\nexport default TextAreaInput;\n"],"names":[],"sourceRoot":""}