{"version":3,"file":"components-Modal-component-stories.42e072c4.iframe.bundle.js","mappings":";AAwCA;;;;AAeA;;;;;;;AAAA;;AAEA;;;;AAIA;AACA;AAGA;AACA;;;AAGA;;AAEA;;;;;;;AC3DA;;AAEA;;;AAGA;;AAIA;;;;AAIA;AACA;AACA;AAGA;;;;;;;AAOA;;;AAGA;;;AAGA;;;;;;;;AAUA;AACA;;AAEA;;;AAKA;AACA;;;;;;;ACrDA;AAGA;AACA;AACA;;;;;AAOA;;;;;;AAMA;;;;;;;;AClBA;;ACDA;;;ACAA;AACA;AACA;AAGA;;;AAGA;AAGA;;;;AAMA;AACA;;;AAKA;AACA;AACA;;;;AAMA;;;;AAIA;;;;;;;;;AASA;;;;AAIA;;AAIA;AACA;AACA;;;;AAIA;;;;;;;;;;ACpDA;;;AAGA;;AAIA;;;;;AAKA;AAGA;;;;AAIA;;AAEA;;;;;;;;;;ACzBA;;;AAKA;;;;AAIA;;;AAKA;;;AAGA;;;AAGA;AAGA;;AAEA;AACA;;;;AAMA;;;;;AAKA;ACpCA;;;ACFA;;;;AAMA;AACA;AACA;;;AAKA;;;;;AAKA;AAEA;;AAIA;;AAEA;AACA;;AAEA;AAEA;;;AAGA;;;;ACjCA;;ACJA;;;AAGA;;;;;AAKA;;;;;AAKA;;;;AAIA;AACA;;ACdA;;;ACKA;;AAEA;;AAEA;AACA;AACA;;;AAGA;AACA;;;AAGA;AAGA;;;;;;;;;;;;AAcA;AACA;AACA;;;;AAMA;AACA;AACA;;;;AAIA;;AAEA;AAGA;;AAIA;;;;AAIA;AC9DA;;ACAA;;;AAOA;;;AAIA;AAEA;;AAIA;AAIA;;;;;;AAQA;;;AAGA;;AAOA;AACA;;AAMA;;;AAQA;AACA;AACA;;;;AAMA;AACA;AACA;;;;AAMA;ACrEA;AACA;;AAEA;;AAGA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;AAEA;;;AAIA;AACA;AACA;;AAEA;;AAKA;;;AAGA;AChDA","sources":["webpack://@mconf/bbb-ui-components-react/./src/components/Modal/styles.ts","webpack://@mconf/bbb-ui-components-react/./src/components/Accordion/styles.ts","webpack://@mconf/bbb-ui-components-react/./src/components/Checkbox/styles.ts","webpack://@mconf/bbb-ui-components-react/./src/components/Divider/styles.ts","webpack://@mconf/bbb-ui-components-react/./src/components/Divider/component.tsx","webpack://@mconf/bbb-ui-components-react/./src/components/Hint/styles.ts","webpack://@mconf/bbb-ui-components-react/./src/components/Navigation/styles.ts","webpack://@mconf/bbb-ui-components-react/./src/components/Select/styles.ts","webpack://@mconf/bbb-ui-components-react/./src/components/Select/component.tsx","webpack://@mconf/bbb-ui-components-react/./src/components/Spinner/styles.ts","webpack://@mconf/bbb-ui-components-react/./src/components/Spinner/component.tsx","webpack://@mconf/bbb-ui-components-react/./src/components/TextAreaInput/styles.ts","webpack://@mconf/bbb-ui-components-react/./src/components/TextAreaInput/component.tsx","webpack://@mconf/bbb-ui-components-react/./src/components/TextInput/styles.ts","webpack://@mconf/bbb-ui-components-react/./src/components/TextInput/component.tsx","webpack://@mconf/bbb-ui-components-react/./src/components/Toggle/styles.ts","webpack://@mconf/bbb-ui-components-react/./src/components/Typography/styles.ts","webpack://@mconf/bbb-ui-components-react/./src/components/Typography/component.tsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Styles } from 'react-modal';\nimport * as React from 'react';\nimport { spacingLarge, spacingMedium, spacingSmallMedium, borderRadiusDefault } from '../../stylesheets/sizing';\nimport { StyledModalBodyProps, StyledModalFooterProps } from './types';\n\nexport const modalStyles: Styles = {\n  overlay: {\n    position: 'fixed',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    backgroundColor: 'rgba(0, 0, 0, 0.75)',\n    zIndex: 100,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  content: {\n    position: 'relative',\n    top: 'auto',\n    left: 'auto',\n    right: 'auto',\n    bottom: 'auto',\n    borderRadius: borderRadiusDefault,\n    background: '#fff',\n    overflow: 'hidden',\n    WebkitOverflowScrolling: 'touch',\n    outline: 'none',\n    padding: '0px',\n    minWidth: '300px',\n    maxWidth: '90vw',\n    maxHeight: '90vh',\n    display: 'flex',\n    flexDirection: 'column' as React.CSSProperties['flexDirection'],\n  },\n};\n\nexport const ModalHeader = styled.div`\n  padding: ${spacingLarge} ${spacingLarge} ${spacingSmallMedium};\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nexport const CloseButton = styled.button`\n  background: none;\n  border: none;\n  font-size: 1.5rem;\n  cursor: pointer;\n  padding: 0;\n  line-height: 1;\n`;\n\nexport const ModalBody = styled.div<StyledModalBodyProps>`\n  flex-grow: 1;\n  overflow-y: ${({ $allowScroll }) => $allowScroll ? 'auto' : 'hidden'};\n  overflow-x: hidden;\n  display: flex;\n  flex-direction: column;\n  padding: 0 ${spacingLarge} 0;\n  margin: ${spacingSmallMedium} 0 ${spacingSmallMedium};\n`;\n\nexport const ModalFooter = styled.div<StyledModalFooterProps>`\n  padding: ${spacingSmallMedium} ${spacingLarge} ${spacingLarge};\n  display: flex;\n  justify-content: flex-end;\n  gap: ${spacingMedium};\n  \n  ${({ $stickyFooter }) =>\n    $stickyFooter &&\n    `\n      position: sticky;\n      bottom: 0;\n      background-color: #fff;\n    `}\n`;\n","import styled from 'styled-components';\nimport { colorBackgroundLight, colorBrand1, colorTextDefault, colorWhite } from '../../stylesheets/pallete';\nimport { fontSizeDefault } from '../../stylesheets/typography';\nimport { borderRadiusDefault, spacingMedium, spacingSmall } from '../../stylesheets/sizing';\nimport { StyledAccordionContent, StyledExpandIcon } from './types';\n\nexport const ExpandButton = styled.button`\n  display: flex;\n  align-items: center;\n  background: none;\n  border: none;\n  cursor: pointer;\n  padding: ${spacingSmall};\n  background-color: transparent;\n  border-radius: ${borderRadiusDefault};\n\n  &:hover {\n    background: ${colorBackgroundLight};\n  }\n`;\n\nexport const ButtonContent = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: ${spacingSmall};\n  border-radius: ${borderRadiusDefault};\n  gap: ${spacingMedium};\n`;\n\nexport const ExpandIcon = styled.div<StyledExpandIcon>`\n  width: 1.375rem;\n  height: 1.375rem;\n  aspect-ratio: 1;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transform: ${({ $expanded }) => ($expanded ? 'rotate(180deg)' : 'rotate(0deg)')};\n  transition: all 0.3s ease;\n  border-radius: 50%;\n  background-color: ${colorBrand1};\n\n  svg {\n    color: ${colorWhite};\n    font-size: 1.25rem;\n    transition: transform 0.3s ease;\n  }\n\n  &:hover {\n    filter: brightness(0.9);\n  }\n`;\n\nexport const TitleText = styled.span`\n  font-size: ${fontSizeDefault};\n  font-weight: 400;\n  color: ${colorTextDefault};\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n\nexport const AccordionContent = styled.div<StyledAccordionContent>`\n  max-height: ${({ $expanded, scrollHeight }) =>\n    $expanded ? `${scrollHeight}px` : '0'};\n  overflow: hidden;\n  transition: max-height 0.3s ease-in-out;\n  padding: 0px 1rem;\n`;\n","import styled from 'styled-components';\nimport { Checkbox as MuiCheckbox } from '@mui/material';\nimport { colorTextDefault, colorBrand1 } from '../../stylesheets/pallete';\nimport { fontSizeDefault } from '../../stylesheets/typography';\nimport { spacingSmall } from '../../stylesheets/sizing';\n\nexport const Container = styled.div`\n  display: inline-flex;\n  align-items: center;\n  gap: ${spacingSmall};\n`;\n\nexport const Label = styled.label`\n  color: ${colorTextDefault};\n  font-size: ${fontSizeDefault};\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n  cursor: pointer;\n`;\n\nexport const StyledCheckbox = styled(MuiCheckbox)`\n  &.MuiCheckbox-root {\n    padding: 0;\n  }\n\n  &.Mui-checked {\n    color: ${colorBrand1};\n  }\n`;\n","import styled from 'styled-components';\nimport { colorBorderDefault } from '../../stylesheets/pallete';\n\nexport const Divider = styled.hr`\n  width: 100%;\n  border-top: 0px;\n  border-right: 0px;\n  border-left: 0px;\n  border-image: initial;\n  border-bottom: 1px solid ${colorBorderDefault};\n  margin: 0px;\n`;\n","import React, { JSX } from 'react';\nimport * as Styled from './styles';\n\n/**\n * A customizable divider used to separate content areas.\n *\n * This component provides a styled divider that supports horizontal/vertical orientation and spacing via styles.\n *\n */\nfunction Divider(): JSX.Element {\n  return (\n    <Styled.Divider />\n  );\n}\n\nexport default Divider;\n","import styled from 'styled-components';\nimport { colorTextDefault, colorBrand1, colorBackgroundLight, colorIconDefault, colorHoverLight } from '../../stylesheets/pallete';\nimport { fontSizeDefault } from '../../stylesheets/typography';\nimport { borderRadiusSmall, spacingMedium, spacingSmall, spacingSmallMedium } from '../../stylesheets/sizing';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: ${spacingSmall};\n  padding: ${spacingMedium};\n  background-color: ${colorBackgroundLight};\n`;\n\nexport const IconTextWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  gap: ${spacingSmallMedium};\n`;\n\nexport const Header = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\n\nexport const IconWrapper = styled.div`\n  color: ${colorBrand1};\n  display: flex;\n  align-items: center;\n`;\n\nexport const Title = styled.label`\n  color: ${colorTextDefault};\n  font-size: ${fontSizeDefault}\n  font-style: normal;\n  font-weight: 600;\n  line-height: normal;\n`;\n\nexport const CloseButton = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: ${colorIconDefault};\n  background: transparent;\n  border: none;\n  border-radius: 50%;\n  cursor: pointer;\n  aspect-ratio: 1;\n\n  &&:hover,\n  &&:active {\n    background-color: ${colorHoverLight};\n  }\n      \n  &&:focus {\n    outline: 2px solid ${colorBrand1};\n  }\n`;\n\nexport const Label = styled.label`\n  color: ${colorTextDefault};\n  font-size: ${fontSizeDefault};\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n  border-radius: ${borderRadiusSmall};\n`;\n","import styled, { css } from 'styled-components';\nimport { borderRadiusSmall, spacingMedium } from '../../stylesheets/sizing';\nimport { colorBrand1 } from '../../stylesheets/pallete';\nimport { StyledIconWrapper } from './types';\n\nexport const NavigationButton = styled.button`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  background: transparent;\n  border: none;\n  cursor: pointer;\n  margin: 1px; /* Adds margin to prevent outline from being cropped */\n  border-radius: ${borderRadiusSmall};\n\n  &:focus {\n    outline: 1px solid ${colorBrand1};\n  }\n`;\n\nexport const IconTextWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n  gap: ${spacingMedium};\n`;\n\nexport const IconWrapper = styled.div<StyledIconWrapper>`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: ${colorBrand1};\n\n  ${({ $isCustomIcon }) => !$isCustomIcon && css`\n    transform: rotate(90deg);\n    [dir=\"rtl\"] & {\n      transform: rotate(-90deg);\n    }\n  `}\n`;","import styled from 'styled-components';\nimport { borderRadiusSmall, spacingMedium, spacingSmall } from '../../stylesheets/sizing';\nimport Select from '@mui/material/Select';\nimport { colorBorderDefault, colorBrand1, colorDarkGray } from '../../stylesheets/pallete';\nimport { fontSizeSmall } from '../../stylesheets/typography';\n\nexport const SelectContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex-shrink: 0;\n  gap: ${spacingSmall};\n  justify-content: start;\n  align-items: center;\n`;\n\nexport const SelectWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  gap: ${spacingMedium}; \n  padding: 1px;\n  width: 100%;\n`;\n\nexport const Selector = styled(Select)`\n  height: 3.5rem;\n  flex: 1;\n  border-radius: ${borderRadiusSmall} !important;\n  overflow: hidden;\n  width: 100%;\n  border: 1px solid ${colorBorderDefault};\n`;\n\nexport const Title = styled.label`\n  align-self: flex-start;\n  color: ${colorDarkGray};\n  font-size: ${fontSizeSmall};\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n`;\n\nexport const SelectorIcon = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-shrink: 0;\n  color: ${colorBrand1};\n`;\n","import React, { JSX, useId } from 'react';\nimport { MdExpandMore } from 'react-icons/md';\nimport { SelectProps } from './types';\nimport * as Styled from './styles';\n\n/**\n * A customizable Select component.\n *\n * This component provides a styled wrapper around the Material-UI Select and additional styling,\n * such as a title and an optional icon.\n *\n */\nfunction Select({\n  title = null,\n  icon = null,\n  children,\n  ariaLabel,\n  ...props\n}: SelectProps): JSX.Element {\n  const id = useId();\n  const selectId = `select-${id}`;\n  const labelId = title ? `select-label-${id}` : undefined;\n\n  return (\n    <Styled.SelectContainer>\n      {title && <Styled.Title id={labelId} htmlFor={selectId}>{title}</Styled.Title>}\n      <Styled.SelectWrapper>\n        {icon && (\n          <Styled.SelectorIcon>\n            {icon}\n          </Styled.SelectorIcon>\n        )}\n        <Styled.Selector\n          {...props}\n          id={selectId}\n          labelId={labelId}\n          aria-label={ariaLabel}\n          IconComponent={MdExpandMore}\n        >\n          {children}\n        </Styled.Selector>\n      </Styled.SelectWrapper>\n    </Styled.SelectContainer>\n  );\n}\n\nexport default Select;\n","import styled, { keyframes, css } from 'styled-components';\nimport { StyledWrapperProps, StyledSvgProps, StyledPathProps } from './types';\nimport { colorBrand1 } from '../../stylesheets/pallete';\n\nconst rotate = keyframes`\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n`;\n\nconst dash = keyframes`\n  0%   { stroke-dasharray: 1, 200; stroke-dashoffset: 0; }\n  50%  { stroke-dasharray: 100, 200; stroke-dashoffset: -15; }\n  100% { stroke-dasharray: 100, 200; stroke-dashoffset: -125; }\n`;\n\nexport const Wrapper = styled.div<StyledWrapperProps>`\n  width: ${({ $size }) => typeof $size === 'number' ? `${$size}px` : $size};\n  height: ${({ $size }) => typeof $size === 'number' ? `${$size}px` : $size};\n  display: inline-grid;\n  place-items: center;\n`;\n\nexport const StyledSvg = styled.svg<StyledSvgProps>`\n  width: 100%;\n  height: 100%;\n  transform-origin: center;\n  overflow: visible;\n  ${({ $animate }) =>\n    $animate && css`\n      animation: ${rotate} 1.4s linear infinite;\n    `}\n`;\n\nexport const Path = styled.circle<StyledPathProps>`\n  fill: none;\n  stroke: ${colorBrand1};\n  stroke-width: ${({ $strokeWidth }) => $strokeWidth}px;\n  stroke-linecap: round;\n  ${({ $animate }) =>\n    $animate && css`\n      animation: ${dash} 1.4s ease-in-out infinite;\n    `}\n\n  ${({ $animate }) =>\n    !$animate && css`\n      stroke-dasharray: 94.2 31.4;\n      stroke-dashoffset: 0;\n    `}\n`;","import React from 'react';\nimport * as Styled from './styles';\nimport { SpinnerProps } from './types';\n\n\n/**\n * A customizable spinner component.\n *\n * This component provides a small, configurable loading indicator for background activity or loading states.\n *\n */\nconst Spinner: React.FC<SpinnerProps> = ({\n  size = 48,\n  strokeWidth = 4,\n  animate = true,\n}) => {\n  return (\n    <Styled.Wrapper $size={size} role=\"progressbar\" aria-label=\"Loading\" aria-busy={animate}>\n      <Styled.StyledSvg viewBox=\"0 0 50 50\" $animate={animate} focusable=\"false\" aria-hidden=\"true\">\n        <Styled.Path\n          className=\"path\"\n          cx=\"25\"\n          cy=\"25\"\n          r=\"20\"\n          $animate={animate}\n          $strokeWidth={strokeWidth}\n        />\n      </Styled.StyledSvg>\n    </Styled.Wrapper>\n  );\n};\n\nexport default Spinner;\n","import styled from 'styled-components';\nimport { colorBorderDefault, colorBrand1, colorBrand2, colorLightGray, colorWhite } from '../../stylesheets/pallete';\nimport { borderRadiusDefault } from '../../stylesheets/sizing';\n\nexport const TextAreaInput = styled.textarea`\n  flex: 1;\n  background: ${colorWhite};\n  background-clip: padding-box;\n  margin: 0;\n  color: ${colorLightGray};\n  padding: calc(.3rem* 2.5) calc(.75rem* 1.25);\n  resize: none;\n  -webkit-transition: none;\n  transition: none;\n  border-radius: ${borderRadiusDefault};\n  font-size: 1rem;\n  line-height: 1;\n  min-height: 2.5rem;\n  max-height: 10rem;\n  border: 1px solid ${colorBorderDefault};\n  overflow-y: hidden;\n  margin: 0.3em;\n  &:focus {\n    outline: ${colorBrand1} solid 2px;\n    box-shadow: 0 0 0 2px ${colorBrand2} inset 0 0 0 1px ${colorBrand1};\n  }\n`;\n","import React, { useRef, useEffect, JSX } from 'react';\nimport { TextAreaInputProps } from './types';\nimport * as Styled from './styles';\n\n/**\n * A customizable text area input component.\n *\n * This component provides a styled, multi-line text input field that automatically\n * focuses on render and supports all standard textarea attributes.\n *\n */\nfunction TextAreaInput({\n  placeholder = '',\n  rows = 1,\n  maxLength = 250,\n  autoFocus = true,\n  inputRef = undefined,\n  onChange,\n  onKeyDown,\n  ...props\n}: TextAreaInputProps): JSX.Element {\n  const internalRef = useRef<HTMLTextAreaElement | null>(null);\n  \n  useEffect(() => {\n    if (autoFocus && internalRef.current) {\n      internalRef.current.focus();\n    }\n  }, [autoFocus]);\n\n  return (\n    <Styled.TextAreaInput\n      {...props}\n      rows={rows}\n      maxLength={maxLength}\n      ref={(ref) => {\n        internalRef.current = ref;\n        if (typeof inputRef === 'function') {\n          inputRef(ref);\n        } else if (inputRef && 'current' in inputRef) {\n          inputRef.current = ref;\n        }\n      }}\n      placeholder={placeholder}\n      onChange={onChange}\n      onKeyDown={onKeyDown}\n    />\n  );\n}\n\nexport default TextAreaInput;\n","import styled, { css } from 'styled-components';\nimport { TextField } from '@mui/material';\nimport {\n  colorBorderDefault, colorBorderSelected,\n  colorTextDefault, colorTextLight,\n} from '../../stylesheets/pallete';\nimport { fontSizeSmall } from '../../stylesheets/typography';\nimport { colorBorderError, colorError } from '../../stylesheets/pallete';\nimport { borderRadiusDefault, spacingMedium, spacingSmall } from '../../stylesheets/sizing';\nimport { StyledTextProps } from './types';\n\n\nexport const StyledTextField = styled(TextField)<StyledTextProps>`\n  .MuiInputBase-root {\n    display: flex;\n    padding: ${spacingMedium};\n    align-items: center;\n    gap: ${spacingSmall};\n    align-self: stretch;\n    border-radius: ${borderRadiusDefault};\n    border: 1px solid ${colorBorderDefault};\n    color: ${colorTextLight};\n\n    &.Mui-focused {\n      border-color: ${colorBorderSelected};\n      color: ${colorTextDefault};\n    }\n    \n    ${({ $error }) =>\n      $error &&\n      css`\n        border-color: ${colorBorderError};\n    `}\n  }\n\n  .MuiInputBase-input {\n    padding: 0;\n    height: auto;\n  }\n\n  .MuiOutlinedInput-notchedOutline {\n    border: none;\n  }\n`;\n\nexport const Label = styled.div`\n  color: ${colorTextDefault};\n  font-size: ${fontSizeSmall};\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n`;\n\nexport const HelperText = styled.div<StyledTextProps>`\n  color: ${colorTextDefault};\n  font-size: ${fontSizeSmall};\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n  padding: 0 ${spacingMedium}; \n\n  ${({ $error }) =>\n    $error &&\n    css`\n      color: ${colorError};\n  `}\n`;\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  gap: ${spacingSmall};\n`;\n","import React, { JSX } from 'react';\nimport { TextInputProps } from './types';\nimport * as Styled from './styles';\n\n/**\n * A customizable text input component.\n *\n * This component provides a styled, single-line text input field that supports\n * icons, custom validation, and all standard input attributes.\n *\n */\nfunction TextInput({\n  label,\n  helperText,\n  error,\n  placeholder,\n  ...props\n}: TextInputProps): JSX.Element {\n  return (\n    <Styled.Container>\n      {label && <Styled.Label>{label}</Styled.Label>}\n      <Styled.StyledTextField {...props} $error={error} placeholder={placeholder} />\n      {helperText && <Styled.HelperText $error={error}>{helperText}</Styled.HelperText>}\n    </Styled.Container>\n  );\n}\n\nexport default TextInput;\n","import { Switch } from '@mui/material';\nimport { styled as materialStyled } from '@mui/material/styles';\nimport styled, {css} from 'styled-components';\nimport { colorBrand1, colorIconDefault, colorTextDefault, colorTextLight, colorWhite } from '../../stylesheets/pallete';\nimport { TEXT_POSITIONS } from './constants';\nimport { StyledTextWrapperProps, StyledToggleWrapperProps } from './types';\nimport { fontSizeBig, fontSizeDefault } from '../../stylesheets/typography';\n\nexport const ToggleWrapper = styled.div<StyledToggleWrapperProps>`\n  display: flex;\n  ${({ $textPosition }) => {\n    if ($textPosition === TEXT_POSITIONS.TOP || $textPosition === TEXT_POSITIONS.BOTTOM) {\n      return css`\n        flex-direction: column;\n        gap: .1rem;\n      `;\n    }\n    const horizontalStyles = css`\n      flex-direction: row;\n      gap: 1rem;\n    `;\n    if ($textPosition === TEXT_POSITIONS.LEFT) {\n      return css`\n        ${horizontalStyles}\n        justify-content: end; \n      `;\n    }\n    return horizontalStyles;\n  }};\n`;\n\nexport const ToggleSwitchWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: start;\n  justify-content: center;\n  padding: 0.3rem 0px;\n`;\n\nexport const TextWrapper = styled.label<StyledTextWrapperProps>`\n  display: flex;\n  flex-direction: column;\n  order: ${({ $textPosition }) => {\n    if ($textPosition === TEXT_POSITIONS.LEFT || $textPosition === TEXT_POSITIONS.TOP) {\n      return -1;\n    }\n    return 1;\n  }};\n  cursor: pointer;\n  ${({ $hasLabel, $hasHelperText }) => (!$hasLabel || !$hasHelperText) && `justify-content: center;`}\n  ${({ $textPosition }) => {\n    if ($textPosition === TEXT_POSITIONS.TOP || $textPosition === TEXT_POSITIONS.BOTTOM) {\n      return css`\n        align-items: center;\n      `;\n    }\n    if ($textPosition === TEXT_POSITIONS.LEFT) return css`align-items: end;`;\n\n    return css`\n      align-items: start;\n    `;\n  }};\n`;\n\nexport const Title = styled.span`\n  color: ${colorTextDefault};\n  font-size: ${fontSizeBig};\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n`;\n\nexport const HelperText = styled.span`\n  color: ${colorTextLight};\n  font-size: ${fontSizeDefault};\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n`;\n\nexport const MaterialToggle = materialStyled(Switch)(({ theme }) => ({\n  width: '2.3rem',\n  height: '1.2rem',\n  padding: 0,\n  display: 'flex',\n  '&:active': {\n    '& .MuiSwitch-switchBase.Mui-checked': {\n      transform: 'translateX(1.2rem)',\n    },\n  },\n  '& .MuiSwitch-switchBase': {\n    padding: '0.2rem',\n    '&.Mui-checked': {\n      transform: 'translateX(1.2rem)',\n      color: colorWhite,\n      '& + .MuiSwitch-track': {\n        opacity: 1,\n        backgroundColor: colorBrand1,\n        ...theme.applyStyles('dark', {\n          backgroundColor: colorBrand1,\n        }),\n      },\n    },\n  },\n  '& .MuiSwitch-thumb': {\n    boxShadow: '0 2px 4px 0 rgb(0 35 11 / 20%)',\n    width: '0.6rem',\n    height: '0.6rem',\n    borderRadius: '0.5rem',\n    transition: theme.transitions.create(['width'], {\n      duration: 200,\n    }),\n    transform: 'translateY(1px)',\n  },\n  '& .MuiSwitch-track': {\n    borderRadius: '0.6rem',\n    opacity: 1,\n    backgroundColor: colorIconDefault,\n    boxSizing: 'border-box',\n    ...theme.applyStyles('dark', {\n      backgroundColor: 'rgba(255,255,255,.35)',\n    }),\n  },\n}));","import styled, { css } from 'styled-components';\nimport { StyledTypography } from './types';\nimport { colorTextDefault, colorTextLight } from '../../stylesheets/pallete';\nimport {\n  fontSizeDefault, fontSizeSmall,\n  fontSizeXSmall, fontWeightDefault,\n  fontWeightHard, fontWeightLight,\n} from '../../stylesheets/typography';\n\nconst variants = {\n  default: css`\n    color: ${colorTextDefault};\n    font-size: ${fontSizeDefault};\n    font-style: normal;\n    font-weight: ${fontWeightLight};\n    line-height: normal;\n  `,\n  selected: css`\n    color: ${colorTextDefault};\n    font-size: ${fontSizeDefault};\n    font-style: normal;\n    font-weight: ${fontWeightHard};\n    line-height: normal;\n  `,\n  text2: css`\n    color: ${colorTextLight};\n    font-size: ${fontSizeSmall};\n    font-style: normal;\n    font-weight: ${fontWeightLight};\n    line-height: normal;\n  `,\n  text3: css`\n    color: ${colorTextLight};\n    font-size: ${fontSizeXSmall};\n    font-style: normal;\n    font-weight: ${fontWeightLight};\n    line-height: normal;\n  `,\n  header: css`\n    color: ${colorTextDefault};\n    font-size: ${fontSizeDefault};\n    font-style: normal;\n    font-weight: ${fontWeightHard};\n    line-height: normal;\n    text-transform: uppercase;\n  `,\n  button: css`\n    color: ${colorTextDefault};\n    font-size: ${fontSizeDefault};\n    font-style: normal;\n    font-weight: ${fontWeightDefault};\n    line-height: normal;\n  `,\n};\n\nexport const TypographyStyled = styled.p<StyledTypography>`\n  margin: 0;\n  padding: 0;\n  ${({ $variant }) => variants[$variant]}\n`;\n","import React from 'react';\nimport { TypographyStyled } from './styles';\nimport { TypographyProps } from './types';\n\n/**\n * A typography component that standardizes text styles across the app.\n *\n * This component provides multiple semantic variants (header, default, label, helper)\n * and allows overriding the rendered HTML element via the `as` prop.\n *\n */\nconst Typography: React.FC<TypographyProps> = ({\n  children,\n  variant = 'default',\n  as,\n  ...props\n}) => {\n  return (\n    <TypographyStyled as={as} $variant={variant} {...props}>\n      {children}\n    </TypographyStyled>\n  );\n};\n\nexport default Typography;\n"],"names":[],"sourceRoot":""}